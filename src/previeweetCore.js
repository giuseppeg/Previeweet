define(
    'previeweet/with_card_info',

    [
        'require',
        'module',
        'exports',
        'core/compose',
        'core/utils',
        'app/data/with_card_metadata',
        'bower_components/xdm.js/xdm'
    ],

    function (require, module, exports) {

        var compose = require('core/compose');
        var utils = require('core/utils');
        var withCardMetadata = require('app/data/with_card_metadata');
        var xdm = require('bower_components/xdm.js/xdm');

        function withCardInfo() {
            compose.mixin(this, [withCardMetadata]);

            this.defaultAttrs({
                cardWrapperClass: '.js-macaw-cards-iframe-container',
                tweetIdData: 'tweet-id',
                itemType: 'tweet'
            });

            var previews = {};

            this.getCardInfo = function (tweet, callback) {
                var expanded_footer = $('<div/>').html(tweet.data('expanded-footer')).children(),
                    cardElem = expanded_footer.find(this.attr.cardWrapperClass),
                    tweetId = tweet.data(this.attr.tweetIdData),
                    cardData,
                    cardDataFromTweet = this.getCardDataFromTweet(tweet);

                if (
                    cardElem.length &&
                    !previews[tweetId] &&
                    (
                        this.attr.types.length === 0 ||
                        this.attr.types.indexOf(cardDataFromTweet.cardName) !== -1
                    )
                ) {
                    cardData = new xdm.Rpc({
                        remote: cardElem.data('src'),
                        container: cardElem[0],
                        onReady: function () {
                            if (callback) {
                                callback();
                            }
                        }
                    }, {
                        // pic.twitter.com (and vine I think)
                        // previews are generated by Twitter.
                        // Let's leave this empty
                    });

                    cardData.data = cardDataFromTweet;
                    previews[tweetId] = cardData;

                    return cardData;
                }
            };

            this.after('initialize', function () {
                if (typeof this.attr.types === 'undefined') {
                    this.attr.types = [];
                }
            });
        }

        module.exports = withCardInfo;
    }
);

define(
    'previeweet',
    [
        'require',
        'module',
        'exports',
        'core/component',
        'previeweet/with_card_info'
    ],

    function (require, module, exports) {
        var defineComponent = require('core/component');
        var withCardInfo = require('previeweet/with_card_info');

        function Previeweet() {
            this.defaultAttrs({
                streamItemSelector: '.stream-item',
                tweetSelector: '.tweet',
                hasCardSelector: '.has-cards, .card2',
                tweetWithPrevieweetClass: 'with-previeweet',
                previeweetClass: 'previeweet',
                contentSelector: '.content .stream-item-footer',
                // supported types ['photo', 'player']
                types: ['photo', 'player'],
                // supported size for instagram: t, m, l IIRC
                instagramSize: 'm',
                instagramClass: 'previeweet-instagram'
            });

            function capitalize(str) {
                return str.charAt(0).toUpperCase() + str.slice(1);
            }

            this.getPreview = function (event, data) {
                var tweet = $(event.target).find(this.attr.tweetSelector),
                    card;

                if (tweet.length === 0) {
                    return;
                }

                if (!tweet.is(this.attr.hasCardSelector)) {
                    this.checkForInstagram(tweet);
                    return;
                }

                card = this.getCardInfo(tweet);

                if (
                    card &&
                    card.iframe
                ) {
                    window.postMessage({
                        customEvt: 'uiPrevieweetRequested',
                        type: card.data.cardName,
                        url: card.iframe.src,
                        itemId: card.data.itemId
                    }, '*');
                }
            };

            this.getPreviewsFromInitialState = function () {
                this.select('streamItemSelector').each(function (_, streamItem) {
                    this.getPreview({
                        target: $(streamItem)
                    });
                }.bind(this));
            };

            this.checkForInstagram = function (tweet) {
                var mediaLink = tweet.find('[data-expanded-url]').first(),
                    mediaUrl,
                    mediaSrc;

                if (mediaLink.length === 0) {
                    return;
                }

                mediaUrl = mediaLink.attr('data-expanded-url');
                mediaSrc = mediaUrl.match(/(?:instagr\.am|instagram\.com)\/p\/([a-zA-Z0-9_\-]+)\/?/i);

                if (mediaSrc && mediaSrc[1]) {
                    mediaSrc = ['//instagram.com/p/', mediaSrc[1], '/media/?size=', this.attr.instagramSize].join('');
                    this.trigger('dataHasPrevieweet', {
                        type: 'instagram',
                        src: "javascript:'<!doctype html><html><head><meta charset=\\'utf-8\\'><style>*{margin:0;padding:0;border:0;}body{max-height:100%;overflow:hidden;}a{display:block}</style></head><body>'+decodeURIComponent('"+encodeURIComponent('<a href="'+mediaUrl+'" target="_blank"><img src="'+mediaSrc+'"></a>')+"')+'</body></html>'",
                        itemId: tweet.attr('data-tweet-id')
                    });
                }
            };

            this.createPreview = function (event, data) {
                var createfn = 'create' + capitalize(data.type);

                if (this[createfn]) {
                    this[createfn](data);
                }
            };

            this.createPhoto = function (data) {
                data.preview = $('<img/>');
                data.preview.attr('src', data.src);

                this.trigger('uiPrevieweetCreatedFromUrl', data);
            };

            this.createIframe = function (data) {
                data.preview = $('<iframe/>');
                data.preview.attr('src', data.src);
                data.preview.attr('allowTrasparency', true);

                this.trigger('uiPrevieweetCreatedFromUrl', data);
            };

            this.createPlayer = this.createInstagram = function (data) {
                this.createIframe(data);
            };

            this.injectPreview = function (event, data) {
                var tweet = this.$node.find('[data-tweet-id="' + data.itemId + '"]');

                if (tweet.length === 0) {
                    return;
                }

                if (data.type === 'instagram') {
                    data.preview.addClass(this.attr.instagramClass);
                    data.preview.addClass(this.attr.instagramClass + '-' + this.attr.instagramSize);
                }

                data.preview.addClass(this.attr.previeweetClass);
                tweet.addClass(this.attr.tweetWithPrevieweetClass);
                tweet.find(this.attr.contentSelector).before(data.preview);
            };

            this.after('initialize', function () {
                this.on('uiHasInjectedTimelineItem', this.getPreview);
                this.on('dataHasPrevieweet', this.createPreview);
                this.on('uiPrevieweetCreatedFromUrl', this.injectPreview);
                if (!this.attr.fromCache) {
                    this.getPreviewsFromInitialState();
                }
            });
        }

        module.exports = defineComponent(Previeweet, withCardInfo);
    }
);

define(
    'previeweet/boot',
    [
        'require',
        'module',
        'exports',
        'core/component',
        'previeweet'
    ],

    function (require, module, exports) {
        var defineComponent = require('core/component');
        var Previeweet = require('previeweet');

        function Boot() {
            this.defaultAttrs({
                timelineSelector: '#timeline',
                noTeardown: true
            });

            this.boot = function (event, data) {
                Previeweet.attachTo(this.attr.timelineSelector, {
                    fromCache: data && data.fromCache
                });
            };

            this.after('initialize', function () {
                this.on('uiSwiftLoaded uiPageChanged', this.boot);
                this.on(window, 'message', function (event) {
                    var evt = event.originalEvent,
                        data = evt.data;

                    if (!data || data.customEvt !== 'dataHasPrevieweet') {
                        return;
                    }

                    this.trigger(this.attr.timelineSelector, 'dataHasPrevieweet', data);
                });
            });
        }

        module.exports = defineComponent(Boot);
    }
);

using('previeweet/boot', function (Boot) {
    Boot.attachTo(document);
});